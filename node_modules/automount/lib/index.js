'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._configure = _configure;
exports.registerComponent = registerComponent;
exports.getMountedComponent = getMountedComponent;
exports.mountAll = mountAll;

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _caseConverter = require('case-converter');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {},
    mountedComponents = {},
    config = {
  camelCase: true,
  unmountRemovedComponents: true,
  defaultProps: {}
};

function _configure(newConfig) {
  _lodash2.default.extend(config, newConfig);
}

function registerComponent(name, component) {
  if (typeof component === 'undefined' && typeof name === 'function') {
    component = name;
    name = component.name;
  }

  components[name] = component;
}

function mount(component, props, rootNode, config) {
  var element = _react2.default.createElement(component, parseProps(_lodash2.default.extend({}, props, config.defaultProps), { camelCase: config.camelCase }), null);
  return _reactDom2.default.render(element, rootNode);
}

function parseProps(props, _ref) {
  var _ref$camelCase = _ref.camelCase,
      camelCase = _ref$camelCase === undefined ? true : _ref$camelCase;

  props = _lodash2.default.mapValues(props, function (value, key, object) {
    if (_lodash2.default.isObject(value) && _lodash2.default.isEqual(_lodash2.default.keys(value), ['$component'])) return function () {
      return mountedComponents[value.$component];
    };
    if (_lodash2.default.isObject(value) && _lodash2.default.isEqual(_lodash2.default.keys(value), ['$window'])) return window[value.$window];
    return value;
  });
  if (camelCase) props = (0, _caseConverter.toCamelCase)(props);
  return props;
}

function getRootNode(scriptNode) {
  var rootNode = document.getElementById(scriptNode.id + '-root');
  if (rootNode) return rootNode;
  rootNode = document.createElement(scriptNode.dataset.rootType || 'div');
  rootNode.id = scriptNode.id + '-root';
  if (scriptNode.dataset.rootClass) rootNode.className = scriptNode.dataset.rootClass;
  scriptNode.parentNode.insertBefore(rootNode, scriptNode);
  return rootNode;
}

function getMountedComponent(component) {
  return mountedComponents[component];
}

function inDocument(node) {
  return document.contains(node);
}

function unmountComponent(component) {
  var root = _reactDom2.default.findDOMNode(component);
  if (root) _reactDom2.default.unmountComponentAtNode(root.parentNode);
}

function isRemoved(component) {
  var root = _reactDom2.default.findDOMNode(component);
  if (!root) return true;
  return !inDocument(root.parentNode);
}

function unmountRemovedComponents() {
  var previouslyMountedComponents = _lodash2.default.extend({}, mountedComponents);
  for (var componentId in previouslyMountedComponents) {
    if (!previouslyMountedComponents.hasOwnProperty(componentId)) continue;
    if (isRemoved(previouslyMountedComponents[componentId])) {
      unmountComponent(previouslyMountedComponents[componentId]);
      delete previouslyMountedComponents[componentId];
    }
  }
}

function mountAll() {
  // Set defaults
  if (config.unmountRemovedComponents) unmountRemovedComponents();

  // Get all scripts
  var scripts = document.querySelectorAll('script[data-component]');
  for (var i = 0; i < scripts.length; i++) {
    var script = scripts[i];
    // Ensure script has an id
    if (typeof script.id === 'undefined') {
      console.error('Auntomount scripts need to have an id');
      continue;
    }

    // Ensure component is not already mounted
    if (typeof mountedComponents[script.id] !== 'undefined') continue;

    // Ensure component is registered
    if (typeof components[script.dataset.component] === 'undefined') {
      console.error(script.dataset.component, 'is not registered with automount');
      continue;
    }

    // Create root for element
    var root = getRootNode(script);

    var props = void 0;
    try {
      props = JSON.parse(script.innerHTML.trim());
    } catch (error) {
      props = {};
    }

    // Mount component
    mountedComponents[script.id] = mount(components[script.dataset.component], props, root, config);

    // Link to original script for external usage
    script.__component = mountedComponents[script.id];
  }
}
//# sourceMappingURL=index.js.map
