{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._configure = _configure;\nexports.registerComponent = registerComponent;\nexports.getMountedComponent = getMountedComponent;\nexports.mountAll = mountAll;\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _caseConverter = require('case-converter');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar components = {},\n    mountedComponents = {},\n    config = {\n  camelCase: true,\n  unmountRemovedComponents: true,\n  defaultProps: {}\n};\n\nfunction _configure(newConfig) {\n  _lodash2.default.extend(config, newConfig);\n}\n\nfunction registerComponent(name, component) {\n  if (typeof component === 'undefined' && typeof name === 'function') {\n    component = name;\n    name = component.name;\n  }\n\n  components[name] = component;\n}\n\nfunction mount(component, props, rootNode, config) {\n  var element = _react2.default.createElement(component, parseProps(_lodash2.default.extend({}, props, config.defaultProps), {\n    camelCase: config.camelCase\n  }), null);\n\n  return _reactDom2.default.render(element, rootNode);\n}\n\nfunction parseProps(props, _ref) {\n  var _ref$camelCase = _ref.camelCase,\n      camelCase = _ref$camelCase === undefined ? true : _ref$camelCase;\n  props = _lodash2.default.mapValues(props, function (value, key, object) {\n    if (_lodash2.default.isObject(value) && _lodash2.default.isEqual(_lodash2.default.keys(value), ['$component'])) return function () {\n      return mountedComponents[value.$component];\n    };\n    if (_lodash2.default.isObject(value) && _lodash2.default.isEqual(_lodash2.default.keys(value), ['$window'])) return window[value.$window];\n    return value;\n  });\n  if (camelCase) props = (0, _caseConverter.toCamelCase)(props);\n  return props;\n}\n\nfunction getRootNode(scriptNode) {\n  var rootNode = document.getElementById(scriptNode.id + '-root');\n  if (rootNode) return rootNode;\n  rootNode = document.createElement(scriptNode.dataset.rootType || 'div');\n  rootNode.id = scriptNode.id + '-root';\n  if (scriptNode.dataset.rootClass) rootNode.className = scriptNode.dataset.rootClass;\n  scriptNode.parentNode.insertBefore(rootNode, scriptNode);\n  return rootNode;\n}\n\nfunction getMountedComponent(component) {\n  return mountedComponents[component];\n}\n\nfunction inDocument(node) {\n  return document.contains(node);\n}\n\nfunction unmountComponent(component) {\n  var root = _reactDom2.default.findDOMNode(component);\n\n  if (root) _reactDom2.default.unmountComponentAtNode(root.parentNode);\n}\n\nfunction isRemoved(component) {\n  var root = _reactDom2.default.findDOMNode(component);\n\n  if (!root) return true;\n  return !inDocument(root.parentNode);\n}\n\nfunction unmountRemovedComponents() {\n  var previouslyMountedComponents = _lodash2.default.extend({}, mountedComponents);\n\n  for (var componentId in previouslyMountedComponents) {\n    if (!previouslyMountedComponents.hasOwnProperty(componentId)) continue;\n\n    if (isRemoved(previouslyMountedComponents[componentId])) {\n      unmountComponent(previouslyMountedComponents[componentId]);\n      delete previouslyMountedComponents[componentId];\n    }\n  }\n}\n\nfunction mountAll() {\n  // Set defaults\n  if (config.unmountRemovedComponents) unmountRemovedComponents(); // Get all scripts\n\n  var scripts = document.querySelectorAll('script[data-component]');\n\n  for (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i]; // Ensure script has an id\n\n    if (typeof script.id === 'undefined') {\n      console.error('Auntomount scripts need to have an id');\n      continue;\n    } // Ensure component is not already mounted\n\n\n    if (typeof mountedComponents[script.id] !== 'undefined') continue; // Ensure component is registered\n\n    if (typeof components[script.dataset.component] === 'undefined') {\n      console.error(script.dataset.component, 'is not registered with automount');\n      continue;\n    } // Create root for element\n\n\n    var root = getRootNode(script);\n    var props = void 0;\n\n    try {\n      props = JSON.parse(script.innerHTML.trim());\n    } catch (error) {\n      props = {};\n    } // Mount component\n\n\n    mountedComponents[script.id] = mount(components[script.dataset.component], props, root, config); // Link to original script for external usage\n\n    script.__component = mountedComponents[script.id];\n  }\n}","map":{"version":3,"sources":["../src/index.js"],"names":["components","mountedComponents","config","camelCase","unmountRemovedComponents","defaultProps","_configure","_","registerComponent","component","name","element","React","parseProps","ReactDOM","props","value","window","rootNode","document","scriptNode","getMountedComponent","root","inDocument","previouslyMountedComponents","isRemoved","unmountComponent","mountAll","scripts","i","script","console","getRootNode","JSON","mount"],"mappings":"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","sourcesContent":["import ReactDOM from 'react-dom';\nimport React from 'react';\nimport _ from 'lodash';\nimport {toCamelCase} from 'case-converter';\n\nconst components = {},\n  mountedComponents = {},\n  config = {\n    camelCase: true,\n    unmountRemovedComponents: true,\n    defaultProps: {}\n  };\n\nexport function _configure(newConfig) {\n  _.extend(config, newConfig);\n}\n\nexport function registerComponent(name, component) {\n  if (typeof component === 'undefined' && typeof name === 'function') {\n    component = name;\n    name = component.name;\n  }\n\n  components[name] = component;\n}\n\nfunction mount(component, props, rootNode, config) {\n  const element = React.createElement(\n    component,\n    parseProps(_.extend({}, props, config.defaultProps), {camelCase: config.camelCase}),\n    null\n  );\n  return ReactDOM.render(\n    element, rootNode\n  );\n}\n\nfunction parseProps(props, {camelCase = true}) {\n  props = _.mapValues(props, (value, key, object) => {\n    if (_.isObject(value) && _.isEqual(_.keys(value), ['$component']))\n      return () => mountedComponents[value.$component];\n    if (_.isObject(value) && _.isEqual(_.keys(value), ['$window']))\n      return window[value.$window];\n    return value;\n  });\n  if (camelCase) props = toCamelCase(props);\n  return props;\n}\n\nfunction getRootNode(scriptNode) {\n  let rootNode = document.getElementById(scriptNode.id + '-root');\n  if (rootNode) return rootNode;\n  rootNode = document.createElement(scriptNode.dataset.rootType || 'div');\n  rootNode.id = scriptNode.id + '-root';\n  if (scriptNode.dataset.rootClass)\n    rootNode.className = scriptNode.dataset.rootClass;\n  scriptNode.parentNode.insertBefore(rootNode, scriptNode);\n  return rootNode;\n}\n\nexport function getMountedComponent(component) {\n  return mountedComponents[component];\n}\n\nfunction inDocument(node) {\n  return document.contains(node);\n}\n\nfunction unmountComponent(component) {\n  const root = ReactDOM.findDOMNode(component);\n  if (root)\n    ReactDOM.unmountComponentAtNode(root.parentNode);\n}\n\nfunction isRemoved(component) {\n  const root = ReactDOM.findDOMNode(component);\n  if (!root)\n    return true;\n  return !inDocument(root.parentNode);\n}\n\nfunction unmountRemovedComponents() {\n  const previouslyMountedComponents = _.extend({}, mountedComponents);\n  for (const componentId in previouslyMountedComponents) {\n    if (!previouslyMountedComponents.hasOwnProperty(componentId)) continue;\n    if (isRemoved(previouslyMountedComponents[componentId])) {\n      unmountComponent(previouslyMountedComponents[componentId]);\n      delete previouslyMountedComponents[componentId];\n    }\n  }\n}\n\nexport function mountAll() {\n  // Set defaults\n  if (config.unmountRemovedComponents) unmountRemovedComponents();\n\n  // Get all scripts\n  const scripts = document.querySelectorAll('script[data-component]');\n  for (let i = 0; i < scripts.length; i++) {\n    const script = scripts[i];\n    // Ensure script has an id\n    if (typeof script.id === 'undefined') {\n      console.error('Auntomount scripts need to have an id');\n      continue;\n    }\n\n    // Ensure component is not already mounted\n    if (typeof mountedComponents[script.id] !== 'undefined') continue;\n\n    // Ensure component is registered\n    if (typeof components[script.dataset.component] === 'undefined') {\n      console.error(script.dataset.component, 'is not registered with automount');\n      continue;\n    }\n\n    // Create root for element\n    const root = getRootNode(script);\n\n    let props;\n    try {\n      props = JSON.parse(script.innerHTML.trim());\n    } catch (error) {\n      props = {};\n    }\n\n    // Mount component\n    mountedComponents[script.id] = mount(\n      components[script.dataset.component],\n      props,\n      root,\n      config\n    );\n\n    // Link to original script for external usage\n    script.__component = mountedComponents[script.id];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}